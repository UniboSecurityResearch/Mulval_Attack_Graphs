% MulVAL interaction rules
% Author : Xinming Ou, Su Zhang
% Copyright (C) 2011, Argus Cybersecurity Lab, Kansas State University

% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

/******************************************************/
/****         Predicates Declaration              *****/
/******************************************************/

primitive(inCompetent(_principal)).
primitive(competent(_principal)).
primitive(clientProgram(_host, _programname)).
primitive(vulExists(_host, _vulID, _program)).
primitive(vulProperty(_vulID, _range, _consequence)).
primitive(hacl(_src, _dst, _prot, _port)).
primitive(attackerLocated(_host)).
primitive(hasAccount(_principal, _host, _account)).
primitive(networkServiceInfo(_host, _program, _protocol, _port, _user)).
primitive(setuidProgramInfo(_host, _program, _owner)).
primitive(nfsExportInfo(_server, _path, _access, _client)).
primitive(nfsMounted(_client, _clientpath, _server, _serverpath, _access)).
primitive(localFileProtection(_host, _user, _access, _path)).
primitive(dependsOn(_h, _program, _library)).
primitive(installed(_h, _program)).
primitive(bugHyp(_,_,_,_)).
primitive(vulExists(_machine,_vulID,_program,_range,_consequence)).
primitive(canAccessFile(_host, _user, _access, _path)).
primitive(isWebServer(_host)).

primitive(located(Principal, Zone)).
primitive(located(Host,Zone,Type)).
primitive(existingProtocol(Zone,Protocol)).
primitive(relay(RelayHost,SrcHost,DstHost)).
primitive(relay(RelayHost,SrcHost,DstHost,Prot,Port)).
primitive(relay(RelayHost,DataFlow)).
primitive(isGateway(Router,Subnet)).
primitive(isAP(AP,WirelessRange,DstZone,Prot,SecurityConf)).
primitive(isNameResolver(ResolverHost,UserHost,Searched)).
primitive(isMaster(Device,BusID)).
primitive(isSlave(Device,BusID)).
primitive(dataFlow(SrcHost,DstHost,FlowName,Direction)).
primitive(dataFlow(SrcHost,DstHost,FlowName)).
primitive(dataFlow(Host,FlowName)).
primitive(flowBind(FlowName,Prot,Port)).
primitive(isPairingProcess(FlowName)).
primitive(aclNW(SrcHostOrsubnet,DstHostOrsubnet,Prot,Port)).
primitive(accessFile(Principal,Host,AccessPerm,Path)).
primitive(accessLinkFlow(Principal, SrcHost, DstHost, Prot, AccessPerm)).
primitive(accessE2EFlow(Principal, SrcHost, DstHost, Prot, Port, AccessPerm)).
primitive(isCredential(DataName,Host,User)).
primitive(isNameResolverRecord(DataName)).
primitive(dataBind(DataName,Host,Path)).
primitive(networkService(Host,Prog,Prot,Port,User)).
primitive(isLoginService(Prog)).
primitive(localService(Host,Prog,User)).
primitive(dependsOn(Host,Prog,Library)).
primitive(bugHype(Host,Prog,Range,Consequence)).
primitive(aclH(Host,User,SrcHostOrSubnet,DstHostOrSubnet,Prot,Port)).
primitive(vulLinkProtocol(LinkID,VulID,Protocol,Range,Consequence)).
primitive(vulE2EProtocol(Host,VulID,Protocol,Port,Range,Consequence)).
primitive(vulE2EProtocol(SrcHost,DstHost,VulID,Protocol,Port,Range,Consequence)).
primitive(vulData(Data,VulID,Consequence)).
primitive(vulBind(Host,VulID,Path)).
primitive(inDiscoveryMode(Host)).
primitive(malicious(Principal)).


meta(cvss(_vulID, _ac)).


derived(execCode(_host, _user)).
derived(netAccess(_machine,_protocol,_port)).
derived(canAccessHost(_host)).
derived(accessFile(_machine,_access,_filepath)).
derived(accessMaliciousInput(_host, _principal, _program)).
derived(principalCompromised(_victim)).
derived(logInService(_host, _protocol, _port)).
derived(l2Connection(Dev1,Dev2,LinkId,Prot,Type)).
derived(l2Connection(Dev1,Dev2,Prot,bus)).
derived(localAccess(Principal,Host,User)).
derived(l2Access(Principal,SrcHost,DstHost,Prot,LinkID,Type)).
derived(netAccess(Principal,SrcHost,DstHost,Prot,Port)).
derived(accessDataFlow(Principal,FlowName,AccessPerm)).
derived(vulHost(Host,VulID,Prog,Range,Consequence)).
derived(vulLinkProtocol(SrcHost,DstHost,VulID,Protocol,Range,Consequence)).
derived(vulFlow(FlowName,VulID,Consequence)).
derived(spoofLinkHost(Principal,ImpersonatedHost,FooledHost,SpoofingHost,Consequence)).
derived(spoofE2EHost(Principal,ImpersonatedHost,FooledHost,SpoofingHost,Prot,Port,Consequence)).
derived(dos(Principal,Host)).
derived(mitmLink(Principal,SrcHost,DstHost,SpoofingHost)).
derived(mitmE2E(Principal,SrcHost,DstHost,SpoofingHost,Prot,Port)).
derived(relay(MITMHost,FlowName)).
derived(relay(MITMHost,SrcHost,DstHost,Prot,Port)).
derived(crackAPEncKey(Principal,AP)).
derived(isAuthenticated(Principal,AttackerHost,AP)).
derived(accessDataFlow(Principal,FlowName,read)).
derived(located(Dev,DstZone,Type)).
derived(accessLinkFlow(Principal, Host, AP, Protocol, read)).
derived(crackAPEncKey(Principal, Host, AP)).
derived(accessDataFlow(Principal, FlowName, read)).
derived(crackPINCode(Principal,SrcHost,DstHost)).
derived(spoofLinkHost(Principal,ImpersonatedHost,FooledHost,AttackerHost,deception)).


meta(attackGoal(_)).
meta(advances(_, _)).

/******************************************************/
/****         Tabling Predicates                  *****/
/*   All derived predicates should be tabled          */
/******************************************************/

:- table execCode/2.
:- table netAccess/3.
:- table canAccessHost/1.
:- table accessFile/3.
:- table principalCompromised/1.
:- table vulExists/5.
:- table logInService/3.
:- table l2Connection/5.
:- table l2Connection/4.
:- table localAccess/3.
:- table l2Access/5.
:- table netAccess/5.
:- table accessDataFlow/3.
:- table vulHost/5.
:- table vulLinkProtocol/6.
:- table vulFlow/3.
:- table spoofLinkHost/5.
:- table spoofE2EHost/7.
:- table dos/2.
:- table mitmLink/4.
:- table mitmE2E/6.
:- table relay/2.
:- table relay/5.
:- table crackAPEncKey/2.
:- table isAuthenticated/3.
:- table accessDataFlow/3.
:- table located/3.
:- table accessLinkFlow/5.
:- table crackAPEncKey/3.
:- table accessDataFlow/3.
:- table crackPINCode/3.
:- table spoofLinkHost/5.

/******************************************************/
/****         Interaction Rules                   *****/
/******************************************************/

/****** Section execCode ******
interaction_rule(
   (execCode(H, Perm) :-
	hasAccount(P, H, Perm)),
   rule_desc('Insider threat', 1)).
*/

interaction_rule(
   (execCode(Host, Perm) :-
	principalCompromised(Victim),
	hasAccount(Victim, Host, Perm),
	canAccessHost(Host)),
   rule_desc('When a principal is compromised any machine he has an account on will also be compromised',
   0.5)).

interaction_rule(
  (execCode(Host, root) :-
	execCode(Host, _Perm2),
	vulExists(Host, _, Software, localExploit, privEscalation)),
  rule_desc('local exploit',
  1.0)).

interaction_rule(
  (execCode(H, Perm) :-
	vulExists(H, _, Software, remoteExploit, privEscalation),
	networkServiceInfo(H, Software, Protocol, Port, Perm),
	netAccess(H, Protocol, Port)),
  rule_desc('remote exploit of a server program',
  1.0)).

interaction_rule(
  (execCode(H, Perm) :-
        vulExists(H, _, Software, remoteClient, privEscalation),
	hasAccount(Victim, H, Perm),
        accessMaliciousInput(H, Victim, Software)),
  rule_desc('remote exploit for a client program',
  0.5)).

interaction_rule(
  (execCode(H, root) :-
	accessFile(H, write, _Path)),
  rule_desc('Trojan horse installation',
  0.8)).

/* Singleton variable at head
interaction_rule(
 (execCode( Attacker, Host, _) :-
   execCode(Attacker, Host, root)),
  'execution at any level if root execution').
*/



/******** Section netAccess ********/
/* accessing a host through network according to a hacl policy.
   For now we assume that every user on a local
   machine has access to network. this may change
   later. */
interaction_rule(
  (netAccess(H2, Protocol, Port) :-
	execCode(H1, _Perm),  /* Any permission level */
	advances(H1, H2),
    hacl(H1, H2, Protocol, Port)),
  rule_desc('multi-hop access',
  0.5)).

interaction_rule(
  (netAccess(H, Protocol, Port) :-
	attackerLocated(Zone),
	hacl(Zone, H, Protocol, Port)),
  rule_desc('direct network access',
  1.0)).

interaction_rule(
  (netAccess(H, Protocol, Port) :-
	attackerLocated(H)),
  rule_desc('direct on-host access',
  1.0)).


/****** Section canAccessHost ******/
interaction_rule(
  (canAccessHost(H) :-
	execCode(H, _Perm)),
  rule_desc('Access a host through executing code on the machine',
  1.0)).

interaction_rule(
  (canAccessHost(H) :-
	logInService(H, Protocol, Port),
	netAccess(H, Protocol, Port)),
  rule_desc('Access a host through a log-in service',
  1.0)).


/******** Section accessFile ********/
interaction_rule(
  (accessFile(H, Access, Path) :-
	execCode(H, Usr),
	canAccessFile(H, Usr, Access, Path)),
  rule_desc('execCode implies file access',
  1.0)).


/****** Section principalCompromised ******/
interaction_rule(
  (principalCompromised(Victim) :-
	hasAccount(Victim, H, _Perm),
	execCode(H, root)),
  rule_desc('password sniffing',
  0.8)).

interaction_rule(
  (principalCompromised(Victim) :-
	hasAccount(Victim, H, User),
	execCode(H, User)),
  rule_desc('password sniffing',
  0.8)).

/*
interaction_rule(
  (principalCompromised(Victim) :-
	inCompetent(Victim)),
  rule_desc('incompetent user',
  0.2)).
*/



/********************************************************/
/*      Software specific knowledge                     */
/********************************************************/

/*
explain(logInService(H, Protocol, Port), Text) :-
	fmt_write_string(Text,
  "There is a login service running under protocol %S and port %S on host %S.", args(Protocol, Port, H)).
*/



/***************** Section ssh **********************/
interaction_rule(
  (logInService(H, Protocol, Port) :-
	networkServiceInfo(H, sshd, Protocol, Port, _)),
  rule_desc('',
  1)).

interaction_rule(
  (logInService(H, Protocol, Port) :-
	networkServiceInfo(H, vpnService, Protocol, Port, _)),
  rule_desc('',
  1)).


/**************** Section  nfs *****************/
/* Principal P can access files on a NFS server if the files
   on the server are mounted at a client and he can access the
   files on the client side */
interaction_rule(
  (accessFile(Server, Access, ServerPath) :-
	nfsMounted(Client, ClientPath, Server, ServerPath, Access),
	accessFile(Client, Access, ClientPath)),
  rule_desc('NFS semantics',
  1)).


/* Principal P can access files on a NFS client if the files
   on the server are mounted at the client and he can access the
   files on the server side */
interaction_rule(
  (accessFile(Client, Access, ClientPath) :-
	nfsMounted(Client, ClientPath, Server, ServerPath, read),
	accessFile(Server, Access, ServerPath)),
  rule_desc('NFS semantics',
  1)).


interaction_rule(
  (accessFile(Server, Access, Path) :-
	execCode(Client, _User),
    nfsExportInfo(Server, Path, Access, Client),
    hacl(Client, Server, nfsProtocol, nfsPort)),
  rule_desc('NFS shell',
  0.8)).


interaction_rule(
  (canAccessFile(H, Usr, Acc, Path) :-
	localFileProtection(H, Usr, Acc, Path)),
  rule_desc('',
  1)).


/* Singleton variable in head
interaction_rule(
  (canAccessFile(_H, root, _Access, _Path)),
  'root has arbitrary access').
*/


interaction_rule((vulExists(H, ID, Sw, Range, Consequence):-
	        vulExists(H, ID, Sw),
		vulProperty(ID, Range, Consequence)),
             rule_desc('',
             1)).

interaction_rule((vulExists(H, _ID, Sw, Range, Consequence):-
	        bugHyp(H, Sw, Range, Consequence)),
             rule_desc('Introducing hypothetical bug',
             1)).


interaction_rule(
  (vulExists(H, ID, Sw, Range, Consequence):-
	  vulExists(H, ID, Library, Range, Consequence),
		dependsOn(H, Sw, Library)),
  rule_desc('Library bug',
  1)).


interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     inCompetent(Victim),
     hacl(H, MaliciousMachine, httpProtocol, httpPort),
     attackerLocated(MaliciousMachine)),
  rule_desc('Browsing a malicious website', 0.8)).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     competent(Victim),
     hacl(H, MaliciousMachine, httpProtocol, httpPort),
     attackerLocated(MaliciousMachine)),
  rule_desc('Browsing a malicious website', 0.1)).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     inCompetent(Victim),
     isWebServer(CompromisedMachine),
     hacl(H, CompromisedMachine, httpProtocol, httpPort),
     execCode(CompromisedMachine, _)),
  rule_desc('Browsing a compromised website', 0.4)).


/*
interaction_rule(
   (canAccessMaliciousInput(H, Browser) :-
     installed(H, Browser),
     isWebBrowser(Browser)),
  rule_desc('A browser can potentially access malicious input',
  1)).


interaction_rule(
   (canAccessMaliciousInput(H, Software) :-
	vulExists(H, _, Software, remoteClient, privEscalation),
	inCompetent(Victim),
	hasAccount(Victim, H, _Perm)),
  rule_desc('A remote client vulnerability can potentially access malicious input from a host used by careless user',
  1)).


interaction_rule(
   (canAccessMaliciousInput(H, Browser) :-
     installed(H, Browser),
     isWebBrowser(Browser),
     hacl(H, MaliciousMachine, httpProtocol, httpPort),
     attackerLocated(MaliciousMachine)),
  rule_desc('Browsing a malicious website',
  1)).

interaction_rule(
   (canAccessMaliciousInput(H, Browser) :-
     installed(H, Browser),
     isWebBrowser(Browser),
     hacl(H, CompromisedMachine, httpProtocol, httpPort),
     execCode(CompromisedMachine, _)),
  rule_desc('Browsing a compromised website',
  0.4)).

interaction_rule(
   (canAccessMaliciousInput(H, EmailClientSoftware) :-
     installed(H, EmailClientSoftware),
     isEmailClient(EmailClientSoftware),
     isEmailServer(EmailServerSoftware),
     hacl(H, EmailServer, EmailProtocol, EmailPort),
     networkServiceInfo(EmailServer, EmailServerSoftware,
                                EmailProtocol, EmailPort, _Perm)),
   rule_desc('receive an email message',
   0.4)).

*/

/**************************** EXTENSIONS *********************************/
interaction_rule(
  (l2Connection(Dev1,Dev2,Link,Prot,ipSubnet):-
      located(Dev1,LinkId,ipSubnet),
      located(Dev2,LinkId,ipSubnet),
      existingProtocol(LinkId,Prot)),
  rule_desc('Ethernet link',
  1.0)).

interaction_rule(
  (l2Connection(Dev1,Dev2,Prot,bus):-
    located(Dev1,BusID,bus),
    located(Dev2,BusID,bus),
    existingProtocol(BusID,Prot)),
  rule_desc('Serial link',
  1.0)).

interaction_rule(
  (l2Connection(Dev,AP,WirelessRange,Prot,wireless):-
    isAP(AP,WirelessRange,DstZone,Prot,open),
    located(Dev,WirelessRange,physical)),
  rule_desc('Wireless link with open access point',
  1.0)).

interaction_rule(
  (l2Connection(Dev,AP,WirelessRange,Prot,wireless):-
    isAP(AP,WirelessRange,DstZone,Prot,secured),
    located(Dev,WirelessRange,physical),
    isAuthenticated(Principal,Dev,AP)),
  rule_desc('Wireless link with secured access point',
  1.0)).

interaction_rule(
  (l2Connection(MasterDevice,SlaveDevice,BluetoothRange,bluetooth,wireless):-
    existingProtocol(BluetoothRange,bluetooth),
    inDiscoveryMode(SlaveDevice),
    located(MasterDevice,BluetoothRange,physical),
    located(SlaveDevice,BluetoothRange,physical)),
  rule_desc('Bluetooth connection',
  1.0)).


interaction_rule(
  (localAccess(attacker,Host,admin):-
    attackerLocated(Host)),
  rule_desc('An attacker who is located in a host has access to that host',
  1.0)).

interaction_rule(
  (localAccess(Principal,HostB, User):-
    hasAccount(Principal,HostB,User),
    networkService(HostB,Prog,Prot,Port,LoginServiceUser),
    netAccess(Principal,HostA,HostB,Prot,Port),
    aclH(HostB,LoginServiceUser,HostA,HostB,Prot,Port),
    isLoginService(Prog)),
  rule_desc('A principal that has local access to a host (HostA) can use it to gain access via the network to a remote host (HostB) by using a network login service and a previously obtained account',
  1.0)).


interaction_rule(
  (l2Access(Principal,SrcHost,DstHost,Prot,LinkID,Type):-
    localAccess(Principal,SrcHost,User),
    l2Connection(SrcHost,DstHost,LinkID,Prot,Type)),
  rule_desc('Access to a host through the link layer',
  1.0)).

interaction_rule(
  (netAccess(Principal,SrcHost,DstHost,Prot,Port):-
    localAccess(Principal,SrcHost,SrcUser),
    aclNW(SrcHost,DstHost,Prot,Port),
    aclH(SrcHost,SrcUser,SrcHost,DstHost,Prot,Port)),
  rule_desc('Access to a host through an end-to-end protocol',
  1.0)).


interaction_rule(
  (accessDataFlow(Principal,FlowName,view):-
    l2Connection(HostA,HostB,WirelessRange,Prot,wireless),
    located(SideHost,WirelessRange,physical),
    localAccess(Principal,SideHost,admin),
    dataFlow(HostA,HostB,FlowName,Direction)),
  rule_desc('Access to data in motion',
  1.0)).

interaction_rule(
  (accessDataFlow(Principal,FlowName,view):-
    l2Connection(HostA,RelayHost,WirelessRange,Prot,wireless),
    located(SideHost,WirelessRange,physical),
    localAccess(Principal,SideHost,admin),
    dataFlow(HostA,FlowName),
    relay(RelayHost,FlowName)),
  rule_desc('Access to data in motion',
  1.0)).


interaction_rule(
  (vulHost(Host,VulID,Prog,Range,Consequence):-
    bugHype(Host,Prog,Range,Consequence)),
  rule_desc('Vulnerability: implementation bug',
  1.0)).

interaction_rule(
  (vulHost(Host,VulID,Prog,Range,Consequence):-
    vulHost(Host,VulID,Library,Range,Consequence),
    dependsOn(Host,Prog,Library)),
  rule_desc('Vulnerability: Vulnerable library',
  1.0)).


interaction_rule(
  (vulLinkProtocol(SrcHost,DstHost,VulID,Protocol,Range,Consequence):-
    vulLinkProtocol(LinkID,VulID,Protocol,Range,Consequence),
    located(SrcHost,LinkID,Type),
    located(DstHost,LinkID,Type)),
  rule_desc('Vulnerable link layer communication',
  1.0)).


interaction_rule(
  (vulFlow(FlowName,unencrypted,Consequence):-
    dataFlow(SrcHost,DstHost,FlowName),
    flowBind(FlowName,E2EProtocol,E2EPort),
    vulE2EProtocol(SrcHost,DstHost,VulID1,E2EProtocol,E2EPort,E2ERange,eavesdropping),
    vulLinkProtocol(SrcHost,DstHost,VulID2,LinkProtocol,LinkRange,eavesdropping),
    vulData(FlowName,unencrypted,Consequence)),
  rule_desc('Vulnerable data in motion due to an insecure end-to-end protocol and an insecure link protocol',
  1.0)).

interaction_rule(
  (vulFlow(FlowName,unencrypted,Consequence):-
    vulE2EProtocol(SrcHost,DstHost,VulID1,E2EProtocol,E2EPort,relayingHost,eavesdropping),
    vulLinkProtocol(SrcHost,RelayHost,VulID2,LinkProtocol,LinkRange,eavesdropping),
    relay(RelayHost,FlowName),
    vulData(FlowName,unencrypted,Consequence),
    dataFlow(SrcHost,DstHost,FlowName),
    flowBind(FlowName,E2EProtocol,E2EPort)),
  rule_desc('Vulnerable flow only within a specific zone',
  1.0)).

interaction_rule(
  (vulFlow(FlowName,unencrypted,Consequence):-
    vulLinkProtocol(SrcHost,DstHost,VulID,Protocol,Range,eavesdropping),
    vulData(FlowName,unencrypted,Consequence),
    dataFlow(SrcHost,DstHost,FlowName),
    flowBind(FlowName,Protocol,_)),
  rule_desc('Eavesdropping on an unencrypted link',
  1.0)).

interaction_rule(
  (vulFlow(FlowName,unsigned,dataFalsification):-
    vulE2EProtocol(SrcHost,DstHost,VulID,Protocol,Port,reayingHost,dataFalsification),
    vulData(FlowName,unsigned,dataFalsification),
    dataFlow(SrcHost,DstHost,FlowName),
    flowBind(FlowName,Protocol,Port)),
  rule_desc('Unsigned data transmitted via a vulnerable end-to-end protocol that enables data falsification',
  1.0)).


interaction_rule(
  (spoofLinkHost(Principal,ImpersonatedHost,FooledHost,AttackerHost, trafficTheft):-
    vulLinkProtocol(FooledHost,ImpersonatedHost,VulID,Prot,adjacent,impersonateDst),
    l2Access(Principal,AttackerHost,ImpersonatedHost,Prot,Zone,ipSubnet)),
  rule_desc('ARP spoofing in the same subnet',
  1.0)).

interaction_rule(
  (spoofLinkHost(Principal,ImpersonatedHost,FooledHost,AttackerHost,trafficTheft):-
    vulLinkProtocol(RelayHost,ImpersonatedHost,VulID,Prot,adjacent,impersonateDst),
    l2Access(Principal,AttackerHost,ImpersonatedHost,Prot,Subnet,ipSubnet),
    dataFlow(FooledHost,ImpersonatedHost,FlowName),
    isGateway(RelayHost,Subnet)),
  rule_desc('ARP spoofing in different subnets',
  1.0)).


interaction_rule(
  (spoofE2EHost(Principal, ImpersonatedHost, FooledHost, AttackerHost, Prot, Port, trafficTheft):-
    isNameResolver(NameResolver, FooledHost, ImpersonatedHost),
    vulE2EProtocol(FooledHost, NameResolver, dnsCachePoisoning, dns, DNSPort, remoteExploit, dataFalsification),
    netAccess(Principal, AttackerHost, NameResolver, dns, DNSPort)),
  rule_desc('DNS spoofing fo traffic theft',
  1.0)).

interaction_rule(
  (spoofE2EHost(Principal, ImpersonatedHost, FooledHost, AttackerHost, Prot, Port, trafficTheft):-
    isNameResolver(NameResolver, FooledHost, ImpersonatedHost),
    localAccess(Principal, NameResolver, admin),
    netAccess(Principal2, FooledHost, AttackerHost, Prot, Port),
    localAccess(Principal, AttackerHost, User)),
  rule_desc('DNS spoofing binding the IP address of the host of the attacker to the queried naming',
  1.0)).

interaction_rule(
  (spoofE2EHost(Principal, ImpersonatedHost, FooledHost, AttackerHost, Prot, Port, trafficTheft):-
    isNameResolver(NameResolver, FooledHost, ImpersonatedHost),
    accessFile(Principal, NameResolver, write, RecoredPath),
    dataBind(NameResolverRecord, NameResolver, RecoredPath),
    isNameResolverRecord(NameResolverRecord)),
  rule_desc('DNS spoofing executed by gaining access to the DNS server with admin privileges',
  1.0)).


interaction_rule(
  (dos(Principal,Host):-
    localAccess(Principal,Host,User),
    localService(Host,Prog,User),
    vulHost(Host,VulID,Prog,localExploit,dos),
    malicious(Principal)),
  rule_desc('Host based DoS',
  1.0)).

interaction_rule(
  (dos(Principal,DstHost):-
    networkService(DstHost,Prog,Prot,Port,NetworkServiceUser),
    aclH(DstHost,NetworkServiceUser,SrcHost,DstHost,Prot,Port),
    vulHost(DstHost,VulID,Prog,remoteExploit,dos),
    netAccess(Principal,SrcHost,DstHost,Prot,Port),
    malicious(Principal)),
  rule_desc('Network based DoS',
  1.0)).


interaction_rule(
  (mitmLink(Principal,SrcHost,DstHost,SpoofingHost):-
    spoofLinkHost(Principal,SrcHost,DstHost,SpoofingHost,trafficTheft),
    spoofLinkHost(Principal,DstHost,SrcHost,SpoofingHost,trafficTheft)),
  rule_desc('MITM attack in the link layer',
  1.0)).

interaction_rule(
  (relay(MITMHost,FlowName):-
    mitmLink(Principal,SrcHost,DstHost,MITMHost),
    dataFlow(SrcHost,DstHost,FlowName,Direction)),
  rule_desc('Relay man in the middle attack',
  1.0)).


interaction_rule(
  (mitmE2E(Principal,SrcHost,DstHost,SpoofingHost,Prot,Port):-
    spoofE2EHost(Principal,SrcHost,DstHost,SpoofingHost,Prot,Port,trafficTheft),
    spoofE2EHost(Principal,DstHost,SrcHost,SpoofingHost,Prot,Port,trafficTheft)),
  rule_desc('MITM attack in the end-to-end layer',
  1.0)).

interaction_rule(
  (relay(MITMHost,SrcHost,DstHost,Prot,Port):-
    mitmE2E(Principal,SrcHost,DstHost,MITMHost,Prot,Port)),
  rule_desc('Relay man in the middle attack',
  1.0)).


interaction_rule(
  (crackAPEncKey(Principal,AP):-
    malicious(Principal),
    accessDataFlow(Principal,FlowName,view),
    relay(AP,FlowName),
    isAP(AP,WirelessRange,DstZone,Prot,secured),
    vulLinkProtocol(WirelessRange,weakEncryption,Prot,remoteExploit,keyExtraction)),
  rule_desc('Crack encryption of WEP access point',
  1.0)).

interaction_rule(
  (accessDataFlow(Principal,FlowName,read):-
    crackAPEncKey(Principal,AP),
    relay(AP,FlowName),
    dataFlow(Host,FlowName),
    flowBind(FlowName,Prot,Port),
    vulE2EProtocol(Host,VulID,Prot,Port,remoteExploit,eavesdropping),
    isAP(AP,WirelessRange,DstZone,WirelessProt,secured),
    located(AttackerHost,WirelessRange,physical),
    localAccess(Principal,AttackerHost,admin)),
  rule_desc('Eavesdrop on all of the traffic broadcasted by the compromised access point',
  1.0)).  

interaction_rule(
  (isAuthenticated(Principal,AttackerHost,AP):-
    crackAPEncKey(Principal,AP),
    isAP(AP,WirelessRange,DstZone,Prot,secured),
    localAccess(Principal,AttackerHost,admin),
    located(AttackerHost,WirelessRange,physical)),
  rule_desc('Authenticate to the access point',
  1.0)).

interaction_rule(
  (dos(Principal,DstHost):-
    malicious(Principal),
    l2Access(Principal,SrcHost,DstHost,Port,BusID,bus)),
  rule_desc('DoS attack on a serial bus',
  1.0)).


interaction_rule(
  (located(Dev,DstZone,Type):-
    l2Connection(Dev,AP,WirelessRange,Prot,wireless),
    isAP(AP,WirelessRange,DstZone,Prot,secured),
    located(_,DstZone,Type)),
  rule_desc('New located interaction rule',
  1.0)).

interaction_rule(
  (accessLinkFlow(Principal, Host, AP, Protocol, read):-
    malicious(Principal),
    localAccess(Principal, AttackerHost, admin),
    located(AttackerHost, WirelessRange, physical),
    flowBind(Flowname, Protocol, Port),
    isCredential(Flowname, DstZone, User),
    vulLinkProtocol(WirelessRange, VulID, Protocol, adjacent, keyReinstallation),
    isAP(AP, WirelessRange, DstZone, Protocol, secured),
    located(Host, WirelessRange, physical)),
  rule_desc('The attacker becomes a MITM between the host and the access point',
  1.0)).

interaction_rule(
  (crackAPEncKey(Principal, Host, AP):-
    malicious(Principal),
    accessLinkFlow(Principal, Host, AP, Protocol, read),
    isAP(AP, WirelessRange, DstZone, Protocol, secured),
    vulLinkProtocol(WirelessRange, VulID1, Protocol, adjacent, keyReinstallation),
    vulHost(Host, VulID2, wpaSupplicant, localExploit, keyExtraction)),
  rule_desc('The attacker prevents the 4th handshake message from reaching the access point, which causes the retransmission of the 3rd message',
  1.0)).


interaction_rule(
  (crackPINCode(Principal,SrcHost,DstHost):-
    malicious(Principal),
    accessDataFlow(Principal,FlowName,read),
    dataFlow(SrcHost,DstHost,FlowName,Direction),
    flowBind(FlowName,bluetooth,_),
    isPairingProcess(FlowName)),
  rule_desc('Cracking the shared secret of two devices establishing a Bluetooth communication',
  1.0)).

interaction_rule(
  (accessDataFlow(Principal,FlowName,read):-
    crackPINCode(Principal,SrcHost,DstHost),
    dataFlow(SrcHost,DstHost,FlowName,Direction),
    flowBind(FlowName,bluetooth,_),
    located(AttackerHost,BluetoothRange,physical),
    localAccess(Principal,AttackerHost,admin)),
  rule_desc('The attacker acquires the capability to decipher the communication between SrcHost and DstHost',
  1.0)).


interaction_rule(
  (spoofLinkHost(Principal,ImpersonatedHost,FooledHost,AttackerHost,deception):-
    vulLinkProtocol(ImpersonatedHost,FooledHost,VulID,Prot,adjacent,impersonateSrc),
    l2Connection(AttackerHost,FooledHost,BusID,Prot,bus),
    localAccess(Principal,AttackerHost,User),
    isMaster(ImpersonatedHost,BusID)),
  rule_desc('A compromised device connected to the bus masquerades as the master and sends fake data and commands',
  1.0)).

interaction_rule(
  (spoofLinkHost(Principal,ImpersonatedHost,FooledHost,AttackerHost,deception):-
    vulLinkProtocol(ImpersonatedHost,FooledHost,VulID,Prot,adjacent,impersonatedSrc),
    l2Connection(AttackerHost,FooledHost,BusID,Prot,bus),
    localAccess(Principal,AttackerHost,User),
    isSlave(ImpersonatedHost,BusID)),
  rule_desc('A compromised device connected to the bus masquerades as a slave and sends false data',
  1.0)).